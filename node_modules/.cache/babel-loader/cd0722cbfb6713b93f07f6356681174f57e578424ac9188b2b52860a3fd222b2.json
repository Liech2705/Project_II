{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_appSidebar = _resolveComponent(\"appSidebar\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_appSidebar)]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_appSidebar"],"sources":["D:\\University\\Semester VI\\Project_2\\New_Project\\website_baodientu\\src\\App.vue"],"sourcesContent":["<template>\n  <div>\n    <appSidebar/>\n  </div>\n</template>\n\n<script>\nimport appSidebar from './components/appSidebar.vue';\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      isExpand: false\n    }\n  },\n  methods: {\n    toggleSidebar() {\n      this.isExpand = !this.isExpand;\n    }\n  },\n  mounted() {\n    // Initialize Bootstrap's collapse plugin\n    const sidebar = document.querySelector('#sidebar');\n    const bsCollapse = new bootstrap.Collapse(sidebar, {\n      toggle: false\n    });\n  },\n  watch: {\n    isExpand(newVal) {\n      const sidebar = document.querySelector('#sidebar');\n      if (newVal) {\n        sidebar.classList.add('expanded');\n      } else {\n        sidebar.classList.remove('expanded');\n      }\n    }\n  },\n  computed: {\n    sidebarClass() {\n      return this.isExpand ? 'sidebar expanded' : 'sidebar';\n    }\n  },\n  components: {\n    appSidebar\n  }\n\n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":";;;uBACEA,mBAAA,CAEM,cADJC,YAAA,CAAaC,qBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}